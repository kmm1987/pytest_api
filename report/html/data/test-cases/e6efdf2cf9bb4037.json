{
  "uid" : "e6efdf2cf9bb4037",
  "name" : "test_programe_info[活动申请详情]",
  "fullName" : "case.test_home_service_list.Test_HomeService_List#test_programe_info",
  "historyId" : "ed808f802a04192e683e45a9620c0cc5",
  "time" : {
    "start" : 1626764653943,
    "stop" : 1626764653981,
    "duration" : 38
  },
  "status" : "broken",
  "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <case.test_home_service_list.Test_HomeService_List object at 0x0000023051728C40>\npageNum = '1', pageSize = '10', activityId = '1'\nexpect = {'result_code': '0', 'result_message': 'ok'}\n\n    @pytest.mark.process\n    @pytest.mark.parametrize('pageNum,pageSize,activityId,expect',testdata['home_service_list'],\n                             ids=['活动申请详情'])\n    def test_programe_info(self,pageNum,pageSize,activityId,expect):\n        self.log.info('%s{%s}' % ((sys._getframe().f_code.co_name,'------活动项目申请接口-----')))\n        # with allure.step('获取活动id'):\n        #     activityId = Api_Auth_Service().get_service_id()\n        with allure.step('申请详情'):\n            msg = Api_Auth_Service().api_home_service_list()\n>       self.log.info('%s:%s' % ((sys._getframe().f_code.co_name, '获取请求结果：%s' % msg.json())))\n\ncase\\test_home_service_list.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Program Files\\Python38\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Program Files\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002304F9F7F10>\ns = '<html>\\r\\n<head><title>403 Forbidden</title></head>\\r\\n<body>\\r\\n<center><h1>403 Forbidden</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "host",
    "time" : {
      "start" : 1626764652765,
      "stop" : 1626764652765,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <case.test_home_service_list.Test_HomeService_List object at 0x0000023051728C40>\npageNum = '1', pageSize = '10', activityId = '1'\nexpect = {'result_code': '0', 'result_message': 'ok'}\n\n    @pytest.mark.process\n    @pytest.mark.parametrize('pageNum,pageSize,activityId,expect',testdata['home_service_list'],\n                             ids=['活动申请详情'])\n    def test_programe_info(self,pageNum,pageSize,activityId,expect):\n        self.log.info('%s{%s}' % ((sys._getframe().f_code.co_name,'------活动项目申请接口-----')))\n        # with allure.step('获取活动id'):\n        #     activityId = Api_Auth_Service().get_service_id()\n        with allure.step('申请详情'):\n            msg = Api_Auth_Service().api_home_service_list()\n>       self.log.info('%s:%s' % ((sys._getframe().f_code.co_name, '获取请求结果：%s' % msg.json())))\n\ncase\\test_home_service_list.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Program Files\\Python38\\lib\\site-packages\\requests\\models.py:900: in json\n    return complexjson.loads(self.text, **kwargs)\nC:\\Program Files\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nC:\\Program Files\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002304F9F7F10>\ns = '<html>\\r\\n<head><title>403 Forbidden</title></head>\\r\\n<body>\\r\\n<center><h1>403 Forbidden</h1></center>\\r\\n<hr><center>openresty</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Program Files\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError",
    "steps" : [ {
      "name" : "申请详情",
      "time" : {
        "start" : 1626764653944,
        "stop" : 1626764653981,
        "duration" : 37
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "36b563a886104f63",
      "name" : "log",
      "source" : "36b563a886104f63.txt",
      "type" : "text/plain",
      "size" : 261
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "项目详情"
  }, {
    "name" : "tag",
    "value" : "process"
  }, {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_home_service_list"
  }, {
    "name" : "subSuite",
    "value" : "Test_HomeService_List"
  }, {
    "name" : "host",
    "value" : "LAPTOP-IOVUFIFT"
  }, {
    "name" : "thread",
    "value" : "3336-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_home_service_list"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "activityId",
    "value" : "'1'"
  }, {
    "name" : "expect",
    "value" : "{'result_code': '0', 'result_message': 'ok'}"
  }, {
    "name" : "pageNum",
    "value" : "'1'"
  }, {
    "name" : "pageSize",
    "value" : "'10'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "process" ]
  },
  "source" : "e6efdf2cf9bb4037.json",
  "parameterValues" : [ "'1'", "{'result_code': '0', 'result_message': 'ok'}", "'1'", "'10'" ]
}